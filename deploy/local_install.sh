#!/bin/bash
# FREQTRADE BOT LOKAL DEPLOYMENT Sƒ∞STEMƒ∞
# Manuel dosya y√ºkleme ile √ßalƒ±≈üƒ±r - GitHub'a baƒüƒ±mlƒ± deƒüil
# Dosyalarƒ± √∂nce /home/dcoakelc/bot_files/ klas√∂r√ºne y√ºkleyin

LOG_FILE="/home/dcoakelc/freqtrade_install.log"
BOT_DIR="/home/dcoakelc/freqtrade-bot1"
UPLOAD_DIR="/home/dcoakelc/bot_files"
PID_FILE="$BOT_DIR/bot.pid"

echo "========================================" >> $LOG_FILE
echo "$(date): FREQTRADE BOT LOKAL KURULUM BA≈ûLADI" >> $LOG_FILE
echo "========================================" >> $LOG_FILE

# Ana dizine git
cd /home/dcoakelc/
echo "$(date): Ana dizin: $(pwd)" >> $LOG_FILE

# Upload klas√∂r√º kontrol et
if [ ! -d "$UPLOAD_DIR" ]; then
    echo "$(date): ‚ùå HATA: $UPLOAD_DIR klas√∂r√º bulunamadƒ±!" >> $LOG_FILE
    echo "$(date): L√ºtfen bot dosyalarƒ±nƒ± $UPLOAD_DIR klas√∂r√ºne y√ºkleyin" >> $LOG_FILE
    echo ""
    echo "Gerekli dosyalar:"
    echo "- config.json"
    echo "- SimpleScalpingStrategy.py"
    echo "- requirements_simple.txt"
    echo "- Bu script dosyasƒ±"
    exit 1
fi

echo "$(date): ‚úÖ Upload klas√∂r√º bulundu: $UPLOAD_DIR" >> $LOG_FILE

# Gerekli dosyalarƒ± kontrol et
REQUIRED_FILES=("config.json" "SimpleScalpingStrategy.py" "requirements_simple.txt")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$UPLOAD_DIR/$file" ]; then
        echo "$(date): ‚ùå HATA: $file dosyasƒ± $UPLOAD_DIR klas√∂r√ºnde bulunamadƒ±!" >> $LOG_FILE
        exit 1
    else
        echo "$(date): ‚úÖ $file dosyasƒ± bulundu" >> $LOG_FILE
    fi
done

# Eski bot'u durdur
if [ -f "$PID_FILE" ]; then
    OLD_PID=$(cat "$PID_FILE")
    if kill -0 "$OLD_PID" 2>/dev/null; then
        echo "$(date): Eski bot durduruluyor (PID: $OLD_PID)..." >> $LOG_FILE
        kill "$OLD_PID"
        sleep 5
    fi
    rm -f "$PID_FILE"
fi

# Eski dosyalarƒ± temizle
echo "$(date): Eski dosyalar temizleniyor..." >> $LOG_FILE
rm -rf "$BOT_DIR" freqtrade* bot*

# Bot dizinini olu≈ütur
mkdir -p "$BOT_DIR"
echo "$(date): Bot dizini olu≈üturuldu: $BOT_DIR" >> $LOG_FILE

# Dosyalarƒ± kopyala
echo "$(date): Bot dosyalarƒ± kopyalanƒ±yor..." >> $LOG_FILE
cp "$UPLOAD_DIR"/* "$BOT_DIR/"
cd "$BOT_DIR"

# Dosya izinlerini ayarla
chmod +x *.sh 2>/dev/null || true
chmod 644 *.py *.json *.txt 2>/dev/null || true

# Dosyalarƒ± listele
echo "$(date): Kopyalanan dosyalar:" >> $LOG_FILE
ls -la >> $LOG_FILE

# Python ve pip g√ºncellemesi
echo "$(date): Python paketleri y√ºkleniyor..." >> $LOG_FILE
pip3 install --user --upgrade pip >> $LOG_FILE 2>&1

# Requirements dosyasƒ±ndan paket kurulumu
if [ -f "requirements_simple.txt" ]; then
    echo "$(date): Requirements.txt'den paketler y√ºkleniyor..." >> $LOG_FILE
    pip3 install --user -r requirements_simple.txt >> $LOG_FILE 2>&1
else
    echo "$(date): Varsayƒ±lan paketler y√ºkleniyor..." >> $LOG_FILE
    pip3 install --user freqtrade ccxt pandas numpy requests >> $LOG_FILE 2>&1
fi

# Config dosyasƒ± kontrol√º ve d√ºzenleme
if [ -f "config.json" ]; then
    echo "$(date): ‚úÖ Config dosyasƒ± bulundu" >> $LOG_FILE
    
    # API anahtarlarƒ± kontrol et
    if grep -q "YOUR_BINANCE_TESTNET_API_KEY" config.json; then
        echo "$(date): ‚ö†Ô∏è API anahtarlarƒ± g√ºncellenmemi≈ü!" >> $LOG_FILE
        
        # Varsayƒ±lan Binance Testnet API anahtarlarƒ± ekle
        sed -i 's/"YOUR_BINANCE_TESTNET_API_KEY"/"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A"/g' config.json
        sed -i 's/"YOUR_BINANCE_TESTNET_SECRET_KEY"/"NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j"/g' config.json
        
        echo "$(date): ‚úÖ Test API anahtarlarƒ± eklendi" >> $LOG_FILE
    fi
else
    echo "$(date): ‚ùå config.json bulunamadƒ±!" >> $LOG_FILE
    exit 1
fi

# Strategy dosyasƒ± kontrol√º
STRATEGY_FILE=""
if [ -f "SimpleScalpingStrategy.py" ]; then
    STRATEGY_FILE="SimpleScalpingStrategy"
    echo "$(date): ‚úÖ SimpleScalpingStrategy.py bulundu" >> $LOG_FILE
elif [ -f "UltraAggressiveScalpingStrategy.py" ]; then
    STRATEGY_FILE="UltraAggressiveScalpingStrategy"
    echo "$(date): ‚úÖ UltraAggressiveScalpingStrategy.py bulundu" >> $LOG_FILE
else
    echo "$(date): ‚ùå Strategy dosyasƒ± bulunamadƒ±!" >> $LOG_FILE
    exit 1
fi

# Web monitoring klas√∂r√ºn√º kontrol et ve olu≈ütur
if [ -d "/home/dcoakelc/public_html" ] && [ "$(ls -A /home/dcoakelc/public_html)" ]; then
    # public_html dolu ise alt klas√∂r kullan
    WEB_DIR="/home/dcoakelc/public_html/freqtrade-bot"
    WEB_URL="http://akelclinics.com/freqtrade-bot/"
    echo "$(date): public_html dolu, alt klas√∂r kullanƒ±lƒ±yor: $WEB_DIR" >> $LOG_FILE
else
    # public_html bo≈ü ise doƒürudan ana domain'i kullan
    WEB_DIR="/home/dcoakelc/public_html"
    WEB_URL="http://akelclinics.com/"
    echo "$(date): public_html bo≈ü, ana domain kullanƒ±lƒ±yor: $WEB_DIR" >> $LOG_FILE
fi

mkdir -p "$WEB_DIR"
echo "$(date): Web monitoring klas√∂r√º hazƒ±rlandƒ±: $WEB_DIR" >> $LOG_FILE

# Bot'u ba≈ülat
echo "$(date): Freqtrade bot ba≈ülatƒ±lƒ±yor..." >> $LOG_FILE
nohup python3 -m freqtrade trade \
    --config config.json \
    --strategy "$STRATEGY_FILE" \
    --logfile freqtrade.log \
    > bot_output.log 2>&1 &

BOT_PID=$!
echo $BOT_PID > "$PID_FILE"
echo "$(date): Bot ba≈ülatƒ±ldƒ± (PID: $BOT_PID)" >> $LOG_FILE

# 5 saniye bekle ve bot durumunu kontrol et
sleep 5
if kill -0 $BOT_PID 2>/dev/null; then
    echo "$(date): ‚úÖ Bot ba≈üarƒ±yla √ßalƒ±≈üƒ±yor!" >> $LOG_FILE
    BOT_STATUS="running"
    BOT_STATUS_MSG="‚úÖ Bot √áalƒ±≈üƒ±yor (PID: $BOT_PID)"
else
    echo "$(date): ‚ùå Bot ba≈ülatƒ±lamadƒ±!" >> $LOG_FILE
    BOT_STATUS="failed"
    BOT_STATUS_MSG="‚ùå Bot Ba≈ülatƒ±lamadƒ±"
    
    # Hata detaylarƒ±nƒ± logla
    echo "$(date): Bot output loglarƒ±:" >> $LOG_FILE
    if [ -f "bot_output.log" ]; then
        tail -20 bot_output.log >> $LOG_FILE
    fi
fi

# Web monitoring sayfalarƒ± olu≈ütur
echo "$(date): Web monitoring sayfalarƒ± olu≈üturuluyor..." >> $LOG_FILE

# Ana status sayfasƒ±
cat > "$WEB_DIR/index.html" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Freqtrade Bot Dashboard</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 0; background: #0a0a0a; color: #00ff41; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { 
            background: linear-gradient(45deg, #001100, #003300); 
            padding: 30px; border-radius: 15px; margin-bottom: 30px; text-align: center;
            border: 1px solid #00ff41; box-shadow: 0 0 20px rgba(0, 255, 65, 0.3);
        }
        .status { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .card { 
            background: #111; padding: 25px; border-radius: 15px; 
            border: 1px solid #00aa00; box-shadow: 0 0 10px rgba(0, 255, 65, 0.1);
        }
        .running { border-color: #00ff41; box-shadow: 0 0 15px rgba(0, 255, 65, 0.3); }
        .failed { border-color: #ff0000; color: #ff6666; box-shadow: 0 0 15px rgba(255, 0, 0, 0.3); }
        .warning { border-color: #ffaa00; color: #ffcc66; }
        .logs { 
            background: #000; padding: 20px; border-radius: 15px; 
            font-family: 'Courier New', monospace; font-size: 14px; 
            max-height: 500px; overflow-y: auto; white-space: pre-wrap;
            border: 1px solid #00aa00; color: #00ff41;
        }
        .nav { display: flex; gap: 15px; margin-bottom: 30px; flex-wrap: wrap; }
        .nav a { 
            background: linear-gradient(45deg, #003300, #005500); 
            color: #00ff41; padding: 12px 24px; text-decoration: none; 
            border-radius: 8px; transition: all 0.3s;
            border: 1px solid #00aa00;
        }
        .nav a:hover { box-shadow: 0 0 10px rgba(0, 255, 65, 0.5); }
        .timestamp { color: #888; font-size: 14px; }
        .refresh { 
            position: fixed; top: 20px; right: 20px; 
            background: #00aa00; color: #fff; border: none; 
            padding: 10px 20px; border-radius: 8px; cursor: pointer;
            border: 1px solid #00ff41;
        }
        h1, h2, h3 { color: #00ff41; text-shadow: 0 0 5px rgba(0, 255, 65, 0.5); }
        .matrix-effect {
            animation: matrix 2s infinite;
        }
        @keyframes matrix {
            0% { text-shadow: 0 0 5px #00ff41; }
            50% { text-shadow: 0 0 20px #00ff41, 0 0 30px #00ff41; }
            100% { text-shadow: 0 0 5px #00ff41; }
        }
    </style>
    <script>
        function refreshPage() { location.reload(); }
        setInterval(refreshPage, 30000); // 30 saniyede bir yenile
        
        function manualRefresh() { location.reload(); }
    </script>
</head>
<body>
    <button class="refresh" onclick="manualRefresh()">üîÑ Yenile</button>
    
    <div class="container">
        <div class="header">
            <h1 class="matrix-effect">ü§ñ Freqtrade Trading Bot</h1>
            <p>Otomatik Kripto Para Trading Sistemi</p>
            <div class="timestamp">Son G√ºncelleme: $(date)</div>
        </div>
        
        <div class="nav">
            <a href="#status">üìä Durum</a>
            <a href="logs.html">üìã Loglar</a>
            <a href="status.php">‚ö° Canlƒ± Status</a>
            <a href="#config">‚öôÔ∏è Ayarlar</a>
        </div>
        
        <div class="status" id="status">
            <div class="card $BOT_STATUS">
                <h3>üöÄ Bot Durumu</h3>
                <p>$BOT_STATUS_MSG</p>
                <p>Ba≈ülatma: $(date)</p>
                <p>Strategy: $STRATEGY_FILE</p>
            </div>
            
            <div class="card">
                <h3>üìà Trading Bilgileri</h3>
                <p><strong>Exchange:</strong> Binance Testnet</p>
                <p><strong>Strategy:</strong> $STRATEGY_FILE</p>
                <p><strong>Pairs:</strong> BTC/USDT, ETH/USDT, BNB/USDT</p>
                <p><strong>Deployment:</strong> Manuel Upload</p>
            </div>
            
            <div class="card">
                <h3>üîß Sistem Bilgileri</h3>
                <p><strong>Kurulum:</strong> Lokal Dosya Sistemi</p>
                <p><strong>Bot Dizini:</strong> $BOT_DIR</p>
                <p><strong>Upload Dizini:</strong> $UPLOAD_DIR</p>
                <p><strong>Log Dosyasƒ±:</strong> $LOG_FILE</p>
            </div>
        </div>
        
        <h2>üìã Son Bot Loglarƒ±</h2>
        <div class="logs" id="logs">
Bot loglarƒ± y√ºkleniyor...
        </div>
    </div>
</body>
</html>
EOF

# Bot loglarƒ±nƒ± web sayfasƒ±na ekle
if [ -f "freqtrade.log" ]; then
    echo "$(date): Bot loglarƒ± web sayfasƒ±na ekleniyor..." >> $LOG_FILE
    LOG_CONTENT=$(tail -30 freqtrade.log | sed 's/&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g')
    sed -i "s/Bot loglarƒ± y√ºkleniyor.../$LOG_CONTENT/" "$WEB_DIR/index.html"
fi

# Logs sayfasƒ±
cat > "$WEB_DIR/logs.html" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Freqtrade Bot Logs - Matrix Style</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { 
            font-family: 'Courier New', monospace; margin: 0; padding: 20px;
            background: #000; color: #00ff41; overflow-x: hidden;
        }
        .container { max-width: 1400px; margin: 0 auto; }
        .header { 
            background: linear-gradient(45deg, #001100, #003300); 
            padding: 20px; border-radius: 10px; margin-bottom: 20px;
            border: 1px solid #00ff41; text-align: center;
        }
        .logs { 
            background: #000; padding: 20px; border-radius: 10px; 
            white-space: pre-wrap; max-height: 800px; overflow-y: auto; 
            border: 2px solid #00aa00; font-size: 13px; line-height: 1.4;
            box-shadow: inset 0 0 20px rgba(0, 255, 65, 0.1);
        }
        .nav { margin-bottom: 20px; text-align: center; }
        .nav a { 
            background: linear-gradient(45deg, #003300, #005500); 
            color: #00ff41; padding: 10px 20px; text-decoration: none; 
            border-radius: 5px; margin-right: 10px;
            border: 1px solid #00aa00; display: inline-block;
        }
        .nav a:hover { box-shadow: 0 0 15px rgba(0, 255, 65, 0.5); }
        h1 { 
            color: #00ff41; text-shadow: 0 0 10px #00ff41;
            animation: glow 2s ease-in-out infinite alternate;
        }
        @keyframes glow {
            from { text-shadow: 0 0 10px #00ff41; }
            to { text-shadow: 0 0 20px #00ff41, 0 0 30px #00ff41; }
        }
        .matrix-line {
            animation: matrix-scroll 0.1s linear;
        }
        @keyframes matrix-scroll {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
    <script>
        function refreshLogs() {
            location.reload();
        }
        setInterval(refreshLogs, 60000); // 1 dakikada bir yenile
        
        // Matrix effect for new lines
        function addMatrixEffect() {
            const logs = document.getElementById('logs');
            const lines = logs.innerHTML.split('\n');
            logs.innerHTML = lines.map(line => 
                `<div class="matrix-line">${line}</div>`
            ).join('');
        }
        
        window.onload = addMatrixEffect;
    </script>
</head>
<body>
    <div class="container">
        <div class="nav">
            <a href="index.html">‚Üê Ana Sayfa</a>
            <a href="#" onclick="refreshLogs()">üîÑ Yenile</a>
            <a href="status.php">‚ö° Canlƒ± Status</a>
        </div>
        
        <div class="header">
            <h1>üìã Freqtrade Bot Logs - Matrix Interface</h1>
            <p>Son g√ºncelleme: <span id="timestamp"></span> | Auto-refresh: 1 dakikada bir</p>
        </div>
        
        <div class="logs" id="logs">
Loglar y√ºkleniyor...
        </div>
    </div>
    
    <script>
        document.getElementById('timestamp').textContent = new Date().toLocaleString('tr-TR');
    </script>
</body>
</html>
EOF

# PHP status sayfasƒ±
cat > "$WEB_DIR/status.php" << 'EOF'
<?php
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');

$botDir = '/home/dcoakelc/freqtrade-bot1';
$pidFile = $botDir . '/bot.pid';
$logFile = '/home/dcoakelc/freqtrade_install.log';
$freqtradeLog = $botDir . '/freqtrade.log';

$status = array(
    'timestamp' => date('Y-m-d H:i:s'),
    'bot_running' => false,
    'pid' => null,
    'last_log_lines' => array(),
    'freqtrade_logs' => array(),
    'uptime' => 'Unknown'
);

// PID kontrol√º
if (file_exists($pidFile)) {
    $pid = trim(file_get_contents($pidFile));
    if ($pid && is_numeric($pid)) {
        $status['pid'] = $pid;
        // Process √ßalƒ±≈üƒ±yor mu kontrol et
        $running = shell_exec("ps -p $pid > /dev/null 2>&1; echo $?");
        $status['bot_running'] = (trim($running) === '0');
    }
}

// Log dosyasƒ± varsa son satƒ±rlarƒ± al
if (file_exists($logFile)) {
    $lines = file($logFile);
    $status['last_log_lines'] = array_slice($lines, -10);
}

// Freqtrade loglarƒ±
if (file_exists($freqtradeLog)) {
    $lines = file($freqtradeLog);
    $status['freqtrade_logs'] = array_slice($lines, -20);
}

echo json_encode($status, JSON_PRETTY_PRINT);
?>
EOF

echo "$(date): ‚úÖ Web monitoring sayfalarƒ± olu≈üturuldu" >> $LOG_FILE

# Bot restart scripti olu≈ütur
cat > "$BOT_DIR/restart_bot.sh" << EOF
#!/bin/bash
# Bot Restart Script
echo "\$(date): Bot restart ba≈ülatƒ±lƒ±yor..." >> $LOG_FILE
cd $BOT_DIR
if [ -f "$PID_FILE" ]; then
    OLD_PID=\$(cat "$PID_FILE")
    if kill -0 "\$OLD_PID" 2>/dev/null; then
        kill "\$OLD_PID"
        sleep 3
    fi
fi

nohup python3 -m freqtrade trade \\
    --config config.json \\
    --strategy "$STRATEGY_FILE" \\
    --logfile freqtrade.log \\
    > bot_output.log 2>&1 &

echo \$! > "$PID_FILE"
echo "\$(date): Bot yeniden ba≈ülatƒ±ldƒ± (PID: \$!)" >> $LOG_FILE
EOF

chmod +x "$BOT_DIR/restart_bot.sh"
echo "$(date): ‚úÖ Restart scripti olu≈üturuldu" >> $LOG_FILE

# Son durum raporu
echo "========================================" >> $LOG_FILE
echo "$(date): LOKAL DEPLOYMENT TAMAMLANDI!" >> $LOG_FILE
echo "üìä Bot Durumu: $BOT_STATUS_MSG" >> $LOG_FILE
echo "üåê Web Dashboard: $WEB_URL" >> $LOG_FILE
echo "üìã Loglar: ${WEB_URL}logs.html" >> $LOG_FILE
echo "‚ö° Canlƒ± Status: ${WEB_URL}status.php" >> $LOG_FILE
echo "üìÅ Bot Dizini: $BOT_DIR" >> $LOG_FILE
echo "üìÅ Upload Dizini: $UPLOAD_DIR" >> $LOG_FILE
echo "üìÑ Log Dosyasƒ±: $LOG_FILE" >> $LOG_FILE
echo "üîÑ Restart: $BOT_DIR/restart_bot.sh" >> $LOG_FILE
echo "========================================" >> $LOG_FILE

# Sonu√ß ekrana yazdƒ±r
echo ""
echo "üéâ Freqtrade Bot Kurulumu Tamamlandƒ±!"
echo "=================================="
echo "üìä Bot Durumu: $BOT_STATUS_MSG"
echo "üåê Web Dashboard: $WEB_URL"
echo "üìã Loglar: ${WEB_URL}logs.html"
echo "‚ö° Canlƒ± Status: ${WEB_URL}status.php"
echo "üìÑ Kurulum Loglarƒ±: $LOG_FILE"
echo ""
if [ "$BOT_STATUS" = "failed" ]; then
    echo "‚ùå Bot ba≈ülatƒ±lamadƒ±! Loglara bakƒ±n:"
    echo "tail -50 $LOG_FILE"
    echo "tail -20 $BOT_DIR/bot_output.log"
fi
